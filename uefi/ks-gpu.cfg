#Generated by Kickstart Configurator
#platform=AMD64 or Intel EM64T

#System language
lang en_US.UTF-8
#Language modules to install
langsupport en_US
#System keyboard
keyboard us
#System mouse
mouse
#System timezone
timezone Asia/Singapore
#Root password
rootpw --iscrypted $6$AqIIRbhH$.MFSaNXH3CIhzv5vQthYf51kvJeZah4dgBHm74adgROT/kwM7jhpAq3gFdagQNnnSO0Gu.Y4gBrY71Z4uG9mI1
#Initial user
user zicons --fullname "ScanOS Administrator" --iscrypted --password $6$somesaltvaluea$Zv3d2LASniCPtiCF5XI3kqad38xi.52GvKVxv1fqbkQIeSL1NRR5OqesHYmymmxuoL2mn9X/9u.ox4Z3zlpA/1
#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#Disk partitioning information
#Disk partitioning information related information was moved to pressed file.
#Network config
%include /tmp/network_confgiuration
#System authorization infomation
auth  --useshadow  --enablemd5 
#Firewall configuration
firewall --disabled
#Do not configure the X Window System
skipx
#Package install information
%packages
vim
openssh-server
dnsutils 
iproute2 
usbutils 
iputils-ping
curl
net-tools  # this includes commands like ifconfig and netstat
wget
man
tcpdump
make
build-essential
ubuntu-gnome-desktop


%pre
# Reading and setting variables of the installation parameters
# TTY switch
exec < /dev/tty6 > /dev/tty6

# Switch to TTY6
chvt 6
# Clear the console
clear

# Set Keyboard #
loadkeys us

# Requesting hostname #
echo "Please enter Unique Hostname ! "
read hostn
hostname $hostn

# Requesting if Nvidia components such as drivers and containerd runtime should be installed
echo "Do you want Nvidia components to be installed? Please answer yes or no."
read install_nvidia
if [ "${install_nvidia}" = "yes" ]
then
  touch /tmp/install_nvidia
fi

# Requesting network configuration
echo "Specify network configuration mode. Possible values 'static' and 'DHCP'. If no correct value is provided DHCP will be used. "
read network_configuration
if [ "${network_configuration}" = "static" ]
then
  echo "Please enter IP address. "
  read ipaddress
  echo "Please enter the network mask in the format xxx.xxx.xxx.xxx"
  read netmask
  echo "Please enter IP address of the default gateway."
  read gateway
  echo "Please enter IP address of the nameserver. To specify multiple nameservers, separate them with a comma."
  read nameserver
  # Preparing a file with all nameservers specified in it.
  echo ${nameserver} | tr , "\n" > /tmp/nameserver_list
  # Preparing network configuration which will be used later.
  echo "network --device=enp12s0 --bootproto=static --ip=${ipaddress} --netmask=${netmask} --gateway=${gateway} --nameserver=$(head -n 1 /tmp/nameserver_list)" > /tmp/network_confgiuration
else
  echo "network --device=enp12s0 --bootproto=dhcp" > /tmp/network_confgiuration
fi

#echo "Please enter IP ADDR(feature in dev) ! "
#read ipaddr
#hostname $ipaddr
#echo -e "NETWORKING=yes\nHOSTNAME=$hostn" > /etc/sysconfig/network

# Display the summary #
echo " "
echo " "
echo "-------------------------------------------------"
echo " Installation Summary"
echo "-------------------------------------------------"
echo " "
echo " "
echo "-------------------------------------------------"
echo " Hostname = $hostn"
echo " User name = ScanOS Administrator"
echo " Login = zicons"
echo " Distribution = Ubuntu 18.04 LTS"
echo " Installation of Nvidia components = ${install_nvidia}"
echo " "
echo " Netowrk configuration:"
if [ "${network_configuration}" = "static" ]
then
  echo " Network mode = static"
  echo " IP = ${ipaddress}"
  echo " Netmask = ${netmask}"
  echo " Gateway = ${gateway}"
  echo " Nameserver = ${nameserver}"
else 
  echo " Network mode = DHCP"
fi
echo "-------------------------------------------------"
echo " "
echo " "
echo "-------------------------------------------------"
echo " Installation will destroy"
echo " all the contents on the disk !"
echo " "
echo " To cancel the installation,"
echo " reboot the machine within 10 seconds!"
echo "--------------------------------------------------"
echo " "
echo " "
sleep 10

# Switch back to TTY1 console
chvt 1
%end

%post --nochroot
# Passing nameserver list from pre step to post.
if [ -e /tmp/nameserver_list ]
then
  cp /tmp/nameserver_list /target/tmp/nameserver_list
fi
# Checking if Nvidia components should be installed and passing information about it from pre to post step.
if [ -e /tmp/install_nvidia ]
then
  cp /tmp/install_nvidia /target/tmp/install_nvidia
fi
%end

%post
# add username to sudoer list
echo "zicons ALL=(ALL)    ALL" >> /etc/sudoers

# disabling ufw systemd service
sudo systemctl disable ufw.service

# Adding all DNS servers specified by a user to /etc/netplan/01-netcfg.yaml file.
if [ -e /tmp/nameserver_list ]
then
  if [ $(wc -l < /tmp/nameserver_list) -gt 1 ]
  then
      for index in 2 $(wc -l < /tmp/nameserver_list)
      do
        cat /tmp/nameserver_list | sed -n "${index}p" | sed 's/.*/              - \"&\"/' >> /etc/netplan/01-netcfg.yaml
      done
  fi
fi

#Removing unneeded packages.
sudo apt-get purge --auto-remove libreoffice* aisleriot gnome-mines gnome-sudoku gnome-mahjongg gnome-bluetooth gnome-calendar \
gnome-todo gnome-disk-utility gnome-screenshot gnome-power-manager seahorse cheese deja-dup firefox thunderbird rhythmbox evince remmina shotwell simple-scan system-config-printer avahi-utils transmission-common totem eog usb-creator-common file-roller -y

# TODO: Install all the software here
apt update

#Installing Chromium
sudo apt-get install chromium-browser=91.0.4472.101-0ubuntu0.18.04.1 -y

if [ -e /tmp/install_nvidia ]
then
  #Installing Nvidia drivers.
  sudo apt-get update
  sudo apt-get install nvidia-driver-460 -y
  
  #Blacklisting nouveau driver
  #Blacklist drivers
  sudo echo "blacklist nouveau" > /etc/modprobe.d/blacklist-nvidia-nouveau.conf
  sudo echo "options nouveau modeset=0" >> /etc/modprobe.d/blacklist-nvidia-nouveau.conf
  #sudo echo "blacklist ast" > /etc/modprobe.d/blacklist-ast.conf
  sudo sed -i 's|^GRUB_TIMEOUT_STYLE=.*|GRUB_TIMEOUT_STYLE=menu|g'  /etc/default/grub
  sudo sed -i 's|^GRUB_TIMEOUT=.*|GRUB_TYMEOUT=10|g'  /etc/default/grub
  sudo sed -i 's|^#GRUB_TERMINAL=.*|GRUB_TERMINAL=console|g'  /etc/default/grub
  sudo update-grub
  sudo update-initramfs -u
  
  #Installing Nvidia container runtime.
  curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | apt-key add -
  distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
  curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | \
    tee /etc/apt/sources.list.d/nvidia-container-runtime.list
  sudo apt-get update
  sudo apt-get install nvidia-container-runtime=3.5.0-1 -y
fi

%end
## END ##